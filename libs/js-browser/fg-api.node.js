/*! For license information please see fg-api.node.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.fgApi=e():t.fgApi=e()}(this,(()=>(()=>{var t={452:function(t,e,n){var r;t.exports=(r=n(249),n(269),n(214),n(888),n(109),function(){var t=r,e=t.lib.BlockCipher,n=t.algo,o=[],i=[],s=[],a=[],c=[],u=[],l=[],h=[],f=[],p=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;var n=0,r=0;for(e=0;e<256;e++){var d=r^r<<1^r<<2^r<<3^r<<4;d=d>>>8^255&d^99,o[n]=d,i[d]=n;var y=t[n],v=t[y],b=t[v],_=257*t[d]^16843008*d;s[n]=_<<24|_>>>8,a[n]=_<<16|_>>>16,c[n]=_<<8|_>>>24,u[n]=_,_=16843009*b^65537*v^257*y^16843008*n,l[d]=_<<24|_>>>8,h[d]=_<<16|_>>>16,f[d]=_<<8|_>>>24,p[d]=_,n?(n=y^t[t[t[b^y]]],r^=t[t[r]]):n=r=1}}();var d=[0,1,2,4,8,16,32,64,128,27,54],y=n.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,n=t.sigBytes/4,r=4*((this._nRounds=n+6)+1),i=this._keySchedule=[],s=0;s<r;s++)s<n?i[s]=e[s]:(u=i[s-1],s%n?n>6&&s%n==4&&(u=o[u>>>24]<<24|o[u>>>16&255]<<16|o[u>>>8&255]<<8|o[255&u]):(u=o[(u=u<<8|u>>>24)>>>24]<<24|o[u>>>16&255]<<16|o[u>>>8&255]<<8|o[255&u],u^=d[s/n|0]<<24),i[s]=i[s-n]^u);for(var a=this._invKeySchedule=[],c=0;c<r;c++){if(s=r-c,c%4)var u=i[s];else u=i[s-4];a[c]=c<4||s<=4?u:l[o[u>>>24]]^h[o[u>>>16&255]]^f[o[u>>>8&255]]^p[o[255&u]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,s,a,c,u,o)},decryptBlock:function(t,e){var n=t[e+1];t[e+1]=t[e+3],t[e+3]=n,this._doCryptBlock(t,e,this._invKeySchedule,l,h,f,p,i),n=t[e+1],t[e+1]=t[e+3],t[e+3]=n},_doCryptBlock:function(t,e,n,r,o,i,s,a){for(var c=this._nRounds,u=t[e]^n[0],l=t[e+1]^n[1],h=t[e+2]^n[2],f=t[e+3]^n[3],p=4,d=1;d<c;d++){var y=r[u>>>24]^o[l>>>16&255]^i[h>>>8&255]^s[255&f]^n[p++],v=r[l>>>24]^o[h>>>16&255]^i[f>>>8&255]^s[255&u]^n[p++],b=r[h>>>24]^o[f>>>16&255]^i[u>>>8&255]^s[255&l]^n[p++],_=r[f>>>24]^o[u>>>16&255]^i[l>>>8&255]^s[255&h]^n[p++];u=y,l=v,h=b,f=_}y=(a[u>>>24]<<24|a[l>>>16&255]<<16|a[h>>>8&255]<<8|a[255&f])^n[p++],v=(a[l>>>24]<<24|a[h>>>16&255]<<16|a[f>>>8&255]<<8|a[255&u])^n[p++],b=(a[h>>>24]<<24|a[f>>>16&255]<<16|a[u>>>8&255]<<8|a[255&l])^n[p++],_=(a[f>>>24]<<24|a[u>>>16&255]<<16|a[l>>>8&255]<<8|a[255&h])^n[p++],t[e]=y,t[e+1]=v,t[e+2]=b,t[e+3]=_},keySize:8});t.AES=e._createHelper(y)}(),r.AES)},109:function(t,e,n){var r,o,i,s,a,c,u,l,h,f,p,d,y,v,b,_,g,w,m;t.exports=(r=n(249),n(888),void(r.lib.Cipher||(o=r,i=o.lib,s=i.Base,a=i.WordArray,c=i.BufferedBlockAlgorithm,u=o.enc,u.Utf8,l=u.Base64,h=o.algo.EvpKDF,f=i.Cipher=c.extend({cfg:s.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,n){this.cfg=this.cfg.extend(n),this._xformMode=t,this._key=e,this.reset()},reset:function(){c.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function t(t){return"string"==typeof t?m:g}return function(e){return{encrypt:function(n,r,o){return t(r).encrypt(e,n,r,o)},decrypt:function(n,r,o){return t(r).decrypt(e,n,r,o)}}}}()}),i.StreamCipher=f.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),p=o.mode={},d=i.BlockCipherMode=s.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),y=p.CBC=function(){var t=d.extend();function e(t,e,n){var r,o=this._iv;o?(r=o,this._iv=void 0):r=this._prevBlock;for(var i=0;i<n;i++)t[e+i]^=r[i]}return t.Encryptor=t.extend({processBlock:function(t,n){var r=this._cipher,o=r.blockSize;e.call(this,t,n,o),r.encryptBlock(t,n),this._prevBlock=t.slice(n,n+o)}}),t.Decryptor=t.extend({processBlock:function(t,n){var r=this._cipher,o=r.blockSize,i=t.slice(n,n+o);r.decryptBlock(t,n),e.call(this,t,n,o),this._prevBlock=i}}),t}(),v=(o.pad={}).Pkcs7={pad:function(t,e){for(var n=4*e,r=n-t.sigBytes%n,o=r<<24|r<<16|r<<8|r,i=[],s=0;s<r;s+=4)i.push(o);var c=a.create(i,r);t.concat(c)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},i.BlockCipher=f.extend({cfg:f.cfg.extend({mode:y,padding:v}),reset:function(){var t;f.reset.call(this);var e=this.cfg,n=e.iv,r=e.mode;this._xformMode==this._ENC_XFORM_MODE?t=r.createEncryptor:(t=r.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==t?this._mode.init(this,n&&n.words):(this._mode=t.call(r,this,n&&n.words),this._mode.__creator=t)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),t=this._process(!0)):(t=this._process(!0),e.unpad(t)),t},blockSize:4}),b=i.CipherParams=s.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}}),_=(o.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,n=t.salt;return(n?a.create([1398893684,1701076831]).concat(n).concat(e):e).toString(l)},parse:function(t){var e,n=l.parse(t),r=n.words;return 1398893684==r[0]&&1701076831==r[1]&&(e=a.create(r.slice(2,4)),r.splice(0,4),n.sigBytes-=16),b.create({ciphertext:n,salt:e})}},g=i.SerializableCipher=s.extend({cfg:s.extend({format:_}),encrypt:function(t,e,n,r){r=this.cfg.extend(r);var o=t.createEncryptor(n,r),i=o.finalize(e),s=o.cfg;return b.create({ciphertext:i,key:n,iv:s.iv,algorithm:t,mode:s.mode,padding:s.padding,blockSize:t.blockSize,formatter:r.format})},decrypt:function(t,e,n,r){return r=this.cfg.extend(r),e=this._parse(e,r.format),t.createDecryptor(n,r).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),w=(o.kdf={}).OpenSSL={execute:function(t,e,n,r){r||(r=a.random(8));var o=h.create({keySize:e+n}).compute(t,r),i=a.create(o.words.slice(e),4*n);return o.sigBytes=4*e,b.create({key:o,iv:i,salt:r})}},m=i.PasswordBasedCipher=g.extend({cfg:g.cfg.extend({kdf:w}),encrypt:function(t,e,n,r){var o=(r=this.cfg.extend(r)).kdf.execute(n,t.keySize,t.ivSize);r.iv=o.iv;var i=g.encrypt.call(this,t,e,o.key,r);return i.mixIn(o),i},decrypt:function(t,e,n,r){r=this.cfg.extend(r),e=this._parse(e,r.format);var o=r.kdf.execute(n,t.keySize,t.ivSize,e.salt);return r.iv=o.iv,g.decrypt.call(this,t,e,o.key,r)}}))))},249:function(t,e,n){var r;t.exports=(r=r||function(t,e){var r;if("undefined"!=typeof window&&window.crypto&&(r=window.crypto),"undefined"!=typeof self&&self.crypto&&(r=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(r=globalThis.crypto),!r&&"undefined"!=typeof window&&window.msCrypto&&(r=window.msCrypto),!r&&void 0!==n.g&&n.g.crypto&&(r=n.g.crypto),!r)try{r=n(480)}catch(t){}var o=function(){if(r){if("function"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},i=Object.create||function(){function t(){}return function(e){var n;return t.prototype=e,n=new t,t.prototype=null,n}}(),s={},a=s.lib={},c=a.Base={extend:function(t){var e=i(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},u=a.WordArray=c.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||h).stringify(this)},concat:function(t){var e=this.words,n=t.words,r=this.sigBytes,o=t.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var s=n[i>>>2]>>>24-i%4*8&255;e[r+i>>>2]|=s<<24-(r+i)%4*8}else for(var a=0;a<o;a+=4)e[r+a>>>2]=n[a>>>2];return this.sigBytes+=o,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=t.ceil(n/4)},clone:function(){var t=c.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],n=0;n<t;n+=4)e.push(o());return new u.init(e,t)}}),l=s.enc={},h=l.Hex={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],o=0;o<n;o++){var i=e[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r+=2)n[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new u.init(n,e/2)}},f=l.Latin1={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],o=0;o<n;o++){var i=e[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r++)n[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new u.init(n,e)}},p=l.Utf8={stringify:function(t){try{return decodeURIComponent(escape(f.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return f.parse(unescape(encodeURIComponent(t)))}},d=a.BufferedBlockAlgorithm=c.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=p.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var n,r=this._data,o=r.words,i=r.sigBytes,s=this.blockSize,a=i/(4*s),c=(a=e?t.ceil(a):t.max((0|a)-this._minBufferSize,0))*s,l=t.min(4*c,i);if(c){for(var h=0;h<c;h+=s)this._doProcessBlock(o,h);n=o.splice(0,c),r.sigBytes-=l}return new u.init(n,l)},clone:function(){var t=c.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),y=(a.Hasher=d.extend({cfg:c.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,n){return new t.init(n).finalize(e)}},_createHmacHelper:function(t){return function(e,n){return new y.HMAC.init(t,n).finalize(e)}}}),s.algo={});return s}(Math),r)},269:function(t,e,n){var r,o,i;t.exports=(r=n(249),i=(o=r).lib.WordArray,o.enc.Base64={stringify:function(t){var e=t.words,n=t.sigBytes,r=this._map;t.clamp();for(var o=[],i=0;i<n;i+=3)for(var s=(e[i>>>2]>>>24-i%4*8&255)<<16|(e[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|e[i+2>>>2]>>>24-(i+2)%4*8&255,a=0;a<4&&i+.75*a<n;a++)o.push(r.charAt(s>>>6*(3-a)&63));var c=r.charAt(64);if(c)for(;o.length%4;)o.push(c);return o.join("")},parse:function(t){var e=t.length,n=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var o=0;o<n.length;o++)r[n.charCodeAt(o)]=o}var s=n.charAt(64);if(s){var a=t.indexOf(s);-1!==a&&(e=a)}return function(t,e,n){for(var r=[],o=0,s=0;s<e;s++)if(s%4){var a=n[t.charCodeAt(s-1)]<<s%4*2|n[t.charCodeAt(s)]>>>6-s%4*2;r[o>>>2]|=a<<24-o%4*8,o++}return i.create(r,o)}(t,e,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},r.enc.Base64)},786:function(t,e,n){var r,o,i;t.exports=(r=n(249),i=(o=r).lib.WordArray,o.enc.Base64url={stringify:function(t,e=!0){var n=t.words,r=t.sigBytes,o=e?this._safe_map:this._map;t.clamp();for(var i=[],s=0;s<r;s+=3)for(var a=(n[s>>>2]>>>24-s%4*8&255)<<16|(n[s+1>>>2]>>>24-(s+1)%4*8&255)<<8|n[s+2>>>2]>>>24-(s+2)%4*8&255,c=0;c<4&&s+.75*c<r;c++)i.push(o.charAt(a>>>6*(3-c)&63));var u=o.charAt(64);if(u)for(;i.length%4;)i.push(u);return i.join("")},parse:function(t,e=!0){var n=t.length,r=e?this._safe_map:this._map,o=this._reverseMap;if(!o){o=this._reverseMap=[];for(var s=0;s<r.length;s++)o[r.charCodeAt(s)]=s}var a=r.charAt(64);if(a){var c=t.indexOf(a);-1!==c&&(n=c)}return function(t,e,n){for(var r=[],o=0,s=0;s<e;s++)if(s%4){var a=n[t.charCodeAt(s-1)]<<s%4*2|n[t.charCodeAt(s)]>>>6-s%4*2;r[o>>>2]|=a<<24-o%4*8,o++}return i.create(r,o)}(t,n,o)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"},r.enc.Base64url)},298:function(t,e,n){var r;t.exports=(r=n(249),function(){var t=r,e=t.lib.WordArray,n=t.enc;function o(t){return t<<8&4278255360|t>>>8&16711935}n.Utf16=n.Utf16BE={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],o=0;o<n;o+=2){var i=e[o>>>2]>>>16-o%4*8&65535;r.push(String.fromCharCode(i))}return r.join("")},parse:function(t){for(var n=t.length,r=[],o=0;o<n;o++)r[o>>>1]|=t.charCodeAt(o)<<16-o%2*16;return e.create(r,2*n)}},n.Utf16LE={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i+=2){var s=o(e[i>>>2]>>>16-i%4*8&65535);r.push(String.fromCharCode(s))}return r.join("")},parse:function(t){for(var n=t.length,r=[],i=0;i<n;i++)r[i>>>1]|=o(t.charCodeAt(i)<<16-i%2*16);return e.create(r,2*n)}}}(),r.enc.Utf16)},888:function(t,e,n){var r,o,i,s,a,c,u,l;t.exports=(l=n(249),n(783),n(824),i=(o=(r=l).lib).Base,s=o.WordArray,c=(a=r.algo).MD5,u=a.EvpKDF=i.extend({cfg:i.extend({keySize:4,hasher:c,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var n,r=this.cfg,o=r.hasher.create(),i=s.create(),a=i.words,c=r.keySize,u=r.iterations;a.length<c;){n&&o.update(n),n=o.update(t).finalize(e),o.reset();for(var l=1;l<u;l++)n=o.finalize(n),o.reset();i.concat(n)}return i.sigBytes=4*c,i}}),r.EvpKDF=function(t,e,n){return u.create(n).compute(t,e)},l.EvpKDF)},209:function(t,e,n){var r,o,i,s;t.exports=(s=n(249),n(109),o=(r=s).lib.CipherParams,i=r.enc.Hex,r.format.Hex={stringify:function(t){return t.ciphertext.toString(i)},parse:function(t){var e=i.parse(t);return o.create({ciphertext:e})}},s.format.Hex)},824:function(t,e,n){var r,o,i;t.exports=(o=(r=n(249)).lib.Base,i=r.enc.Utf8,void(r.algo.HMAC=o.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=i.parse(e));var n=t.blockSize,r=4*n;e.sigBytes>r&&(e=t.finalize(e)),e.clamp();for(var o=this._oKey=e.clone(),s=this._iKey=e.clone(),a=o.words,c=s.words,u=0;u<n;u++)a[u]^=1549556828,c[u]^=909522486;o.sigBytes=s.sigBytes=r,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,n=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(n))}})))},354:function(t,e,n){var r;t.exports=(r=n(249),n(938),n(433),n(298),n(269),n(786),n(214),n(783),n(153),n(792),n(34),n(460),n(327),n(706),n(824),n(112),n(888),n(109),n(568),n(242),n(968),n(660),n(148),n(615),n(807),n(77),n(475),n(991),n(209),n(452),n(253),n(857),n(454),n(974),r)},433:function(t,e,n){var r;t.exports=(r=n(249),function(){if("function"==typeof ArrayBuffer){var t=r.lib.WordArray,e=t.init,n=t.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var n=t.byteLength,r=[],o=0;o<n;o++)r[o>>>2]|=t[o]<<24-o%4*8;e.call(this,r,n)}else e.apply(this,arguments)};n.prototype=t}}(),r.lib.WordArray)},214:function(t,e,n){var r;t.exports=(r=n(249),function(t){var e=r,n=e.lib,o=n.WordArray,i=n.Hasher,s=e.algo,a=[];!function(){for(var e=0;e<64;e++)a[e]=4294967296*t.abs(t.sin(e+1))|0}();var c=s.MD5=i.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var n=0;n<16;n++){var r=e+n,o=t[r];t[r]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}var i=this._hash.words,s=t[e+0],c=t[e+1],p=t[e+2],d=t[e+3],y=t[e+4],v=t[e+5],b=t[e+6],_=t[e+7],g=t[e+8],w=t[e+9],m=t[e+10],k=t[e+11],x=t[e+12],S=t[e+13],B=t[e+14],P=t[e+15],C=i[0],O=i[1],A=i[2],E=i[3];C=u(C,O,A,E,s,7,a[0]),E=u(E,C,O,A,c,12,a[1]),A=u(A,E,C,O,p,17,a[2]),O=u(O,A,E,C,d,22,a[3]),C=u(C,O,A,E,y,7,a[4]),E=u(E,C,O,A,v,12,a[5]),A=u(A,E,C,O,b,17,a[6]),O=u(O,A,E,C,_,22,a[7]),C=u(C,O,A,E,g,7,a[8]),E=u(E,C,O,A,w,12,a[9]),A=u(A,E,C,O,m,17,a[10]),O=u(O,A,E,C,k,22,a[11]),C=u(C,O,A,E,x,7,a[12]),E=u(E,C,O,A,S,12,a[13]),A=u(A,E,C,O,B,17,a[14]),C=l(C,O=u(O,A,E,C,P,22,a[15]),A,E,c,5,a[16]),E=l(E,C,O,A,b,9,a[17]),A=l(A,E,C,O,k,14,a[18]),O=l(O,A,E,C,s,20,a[19]),C=l(C,O,A,E,v,5,a[20]),E=l(E,C,O,A,m,9,a[21]),A=l(A,E,C,O,P,14,a[22]),O=l(O,A,E,C,y,20,a[23]),C=l(C,O,A,E,w,5,a[24]),E=l(E,C,O,A,B,9,a[25]),A=l(A,E,C,O,d,14,a[26]),O=l(O,A,E,C,g,20,a[27]),C=l(C,O,A,E,S,5,a[28]),E=l(E,C,O,A,p,9,a[29]),A=l(A,E,C,O,_,14,a[30]),C=h(C,O=l(O,A,E,C,x,20,a[31]),A,E,v,4,a[32]),E=h(E,C,O,A,g,11,a[33]),A=h(A,E,C,O,k,16,a[34]),O=h(O,A,E,C,B,23,a[35]),C=h(C,O,A,E,c,4,a[36]),E=h(E,C,O,A,y,11,a[37]),A=h(A,E,C,O,_,16,a[38]),O=h(O,A,E,C,m,23,a[39]),C=h(C,O,A,E,S,4,a[40]),E=h(E,C,O,A,s,11,a[41]),A=h(A,E,C,O,d,16,a[42]),O=h(O,A,E,C,b,23,a[43]),C=h(C,O,A,E,w,4,a[44]),E=h(E,C,O,A,x,11,a[45]),A=h(A,E,C,O,P,16,a[46]),C=f(C,O=h(O,A,E,C,p,23,a[47]),A,E,s,6,a[48]),E=f(E,C,O,A,_,10,a[49]),A=f(A,E,C,O,B,15,a[50]),O=f(O,A,E,C,v,21,a[51]),C=f(C,O,A,E,x,6,a[52]),E=f(E,C,O,A,d,10,a[53]),A=f(A,E,C,O,m,15,a[54]),O=f(O,A,E,C,c,21,a[55]),C=f(C,O,A,E,g,6,a[56]),E=f(E,C,O,A,P,10,a[57]),A=f(A,E,C,O,b,15,a[58]),O=f(O,A,E,C,S,21,a[59]),C=f(C,O,A,E,y,6,a[60]),E=f(E,C,O,A,k,10,a[61]),A=f(A,E,C,O,p,15,a[62]),O=f(O,A,E,C,w,21,a[63]),i[0]=i[0]+C|0,i[1]=i[1]+O|0,i[2]=i[2]+A|0,i[3]=i[3]+E|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,o=8*e.sigBytes;n[o>>>5]|=128<<24-o%32;var i=t.floor(r/4294967296),s=r;n[15+(o+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),n[14+(o+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),e.sigBytes=4*(n.length+1),this._process();for(var a=this._hash,c=a.words,u=0;u<4;u++){var l=c[u];c[u]=16711935&(l<<8|l>>>24)|4278255360&(l<<24|l>>>8)}return a},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});function u(t,e,n,r,o,i,s){var a=t+(e&n|~e&r)+o+s;return(a<<i|a>>>32-i)+e}function l(t,e,n,r,o,i,s){var a=t+(e&r|n&~r)+o+s;return(a<<i|a>>>32-i)+e}function h(t,e,n,r,o,i,s){var a=t+(e^n^r)+o+s;return(a<<i|a>>>32-i)+e}function f(t,e,n,r,o,i,s){var a=t+(n^(e|~r))+o+s;return(a<<i|a>>>32-i)+e}e.MD5=i._createHelper(c),e.HmacMD5=i._createHmacHelper(c)}(Math),r.MD5)},568:function(t,e,n){var r;t.exports=(r=n(249),n(109),r.mode.CFB=function(){var t=r.lib.BlockCipherMode.extend();function e(t,e,n,r){var o,i=this._iv;i?(o=i.slice(0),this._iv=void 0):o=this._prevBlock,r.encryptBlock(o,0);for(var s=0;s<n;s++)t[e+s]^=o[s]}return t.Encryptor=t.extend({processBlock:function(t,n){var r=this._cipher,o=r.blockSize;e.call(this,t,n,o,r),this._prevBlock=t.slice(n,n+o)}}),t.Decryptor=t.extend({processBlock:function(t,n){var r=this._cipher,o=r.blockSize,i=t.slice(n,n+o);e.call(this,t,n,o,r),this._prevBlock=i}}),t}(),r.mode.CFB)},968:function(t,e,n){var r;t.exports=(r=n(249),n(109),r.mode.CTRGladman=function(){var t=r.lib.BlockCipherMode.extend();function e(t){if(255==(t>>24&255)){var e=t>>16&255,n=t>>8&255,r=255&t;255===e?(e=0,255===n?(n=0,255===r?r=0:++r):++n):++e,t=0,t+=e<<16,t+=n<<8,t+=r}else t+=1<<24;return t}var n=t.Encryptor=t.extend({processBlock:function(t,n){var r=this._cipher,o=r.blockSize,i=this._iv,s=this._counter;i&&(s=this._counter=i.slice(0),this._iv=void 0),function(t){0===(t[0]=e(t[0]))&&(t[1]=e(t[1]))}(s);var a=s.slice(0);r.encryptBlock(a,0);for(var c=0;c<o;c++)t[n+c]^=a[c]}});return t.Decryptor=n,t}(),r.mode.CTRGladman)},242:function(t,e,n){var r,o,i;t.exports=(i=n(249),n(109),i.mode.CTR=(o=(r=i.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(t,e){var n=this._cipher,r=n.blockSize,o=this._iv,i=this._counter;o&&(i=this._counter=o.slice(0),this._iv=void 0);var s=i.slice(0);n.encryptBlock(s,0),i[r-1]=i[r-1]+1|0;for(var a=0;a<r;a++)t[e+a]^=s[a]}}),r.Decryptor=o,r),i.mode.CTR)},148:function(t,e,n){var r,o;t.exports=(o=n(249),n(109),o.mode.ECB=((r=o.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),r.Decryptor=r.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),r),o.mode.ECB)},660:function(t,e,n){var r,o,i;t.exports=(i=n(249),n(109),i.mode.OFB=(o=(r=i.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(t,e){var n=this._cipher,r=n.blockSize,o=this._iv,i=this._keystream;o&&(i=this._keystream=o.slice(0),this._iv=void 0),n.encryptBlock(i,0);for(var s=0;s<r;s++)t[e+s]^=i[s]}}),r.Decryptor=o,r),i.mode.OFB)},615:function(t,e,n){var r;t.exports=(r=n(249),n(109),r.pad.AnsiX923={pad:function(t,e){var n=t.sigBytes,r=4*e,o=r-n%r,i=n+o-1;t.clamp(),t.words[i>>>2]|=o<<24-i%4*8,t.sigBytes+=o},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},r.pad.Ansix923)},807:function(t,e,n){var r;t.exports=(r=n(249),n(109),r.pad.Iso10126={pad:function(t,e){var n=4*e,o=n-t.sigBytes%n;t.concat(r.lib.WordArray.random(o-1)).concat(r.lib.WordArray.create([o<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},r.pad.Iso10126)},77:function(t,e,n){var r;t.exports=(r=n(249),n(109),r.pad.Iso97971={pad:function(t,e){t.concat(r.lib.WordArray.create([2147483648],1)),r.pad.ZeroPadding.pad(t,e)},unpad:function(t){r.pad.ZeroPadding.unpad(t),t.sigBytes--}},r.pad.Iso97971)},991:function(t,e,n){var r;t.exports=(r=n(249),n(109),r.pad.NoPadding={pad:function(){},unpad:function(){}},r.pad.NoPadding)},475:function(t,e,n){var r;t.exports=(r=n(249),n(109),r.pad.ZeroPadding={pad:function(t,e){var n=4*e;t.clamp(),t.sigBytes+=n-(t.sigBytes%n||n)},unpad:function(t){var e=t.words,n=t.sigBytes-1;for(n=t.sigBytes-1;n>=0;n--)if(e[n>>>2]>>>24-n%4*8&255){t.sigBytes=n+1;break}}},r.pad.ZeroPadding)},112:function(t,e,n){var r,o,i,s,a,c,u,l,h;t.exports=(h=n(249),n(783),n(824),i=(o=(r=h).lib).Base,s=o.WordArray,c=(a=r.algo).SHA1,u=a.HMAC,l=a.PBKDF2=i.extend({cfg:i.extend({keySize:4,hasher:c,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var n=this.cfg,r=u.create(n.hasher,t),o=s.create(),i=s.create([1]),a=o.words,c=i.words,l=n.keySize,h=n.iterations;a.length<l;){var f=r.update(e).finalize(i);r.reset();for(var p=f.words,d=p.length,y=f,v=1;v<h;v++){y=r.finalize(y),r.reset();for(var b=y.words,_=0;_<d;_++)p[_]^=b[_]}o.concat(f),c[0]++}return o.sigBytes=4*l,o}}),r.PBKDF2=function(t,e,n){return l.create(n).compute(t,e)},h.PBKDF2)},974:function(t,e,n){var r;t.exports=(r=n(249),n(269),n(214),n(888),n(109),function(){var t=r,e=t.lib.StreamCipher,n=t.algo,o=[],i=[],s=[],a=n.RabbitLegacy=e.extend({_doReset:function(){var t=this._key.words,e=this.cfg.iv,n=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],r=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];this._b=0;for(var o=0;o<4;o++)c.call(this);for(o=0;o<8;o++)r[o]^=n[o+4&7];if(e){var i=e.words,s=i[0],a=i[1],u=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),l=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),h=u>>>16|4294901760&l,f=l<<16|65535&u;for(r[0]^=u,r[1]^=h,r[2]^=l,r[3]^=f,r[4]^=u,r[5]^=h,r[6]^=l,r[7]^=f,o=0;o<4;o++)c.call(this)}},_doProcessBlock:function(t,e){var n=this._X;c.call(this),o[0]=n[0]^n[5]>>>16^n[3]<<16,o[1]=n[2]^n[7]>>>16^n[5]<<16,o[2]=n[4]^n[1]>>>16^n[7]<<16,o[3]=n[6]^n[3]>>>16^n[1]<<16;for(var r=0;r<4;r++)o[r]=16711935&(o[r]<<8|o[r]>>>24)|4278255360&(o[r]<<24|o[r]>>>8),t[e+r]^=o[r]},blockSize:4,ivSize:2});function c(){for(var t=this._X,e=this._C,n=0;n<8;n++)i[n]=e[n];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<i[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<i[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<i[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<i[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<i[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<i[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<i[6]>>>0?1:0)|0,this._b=e[7]>>>0<i[7]>>>0?1:0,n=0;n<8;n++){var r=t[n]+e[n],o=65535&r,a=r>>>16,c=((o*o>>>17)+o*a>>>15)+a*a,u=((4294901760&r)*r|0)+((65535&r)*r|0);s[n]=c^u}t[0]=s[0]+(s[7]<<16|s[7]>>>16)+(s[6]<<16|s[6]>>>16)|0,t[1]=s[1]+(s[0]<<8|s[0]>>>24)+s[7]|0,t[2]=s[2]+(s[1]<<16|s[1]>>>16)+(s[0]<<16|s[0]>>>16)|0,t[3]=s[3]+(s[2]<<8|s[2]>>>24)+s[1]|0,t[4]=s[4]+(s[3]<<16|s[3]>>>16)+(s[2]<<16|s[2]>>>16)|0,t[5]=s[5]+(s[4]<<8|s[4]>>>24)+s[3]|0,t[6]=s[6]+(s[5]<<16|s[5]>>>16)+(s[4]<<16|s[4]>>>16)|0,t[7]=s[7]+(s[6]<<8|s[6]>>>24)+s[5]|0}t.RabbitLegacy=e._createHelper(a)}(),r.RabbitLegacy)},454:function(t,e,n){var r;t.exports=(r=n(249),n(269),n(214),n(888),n(109),function(){var t=r,e=t.lib.StreamCipher,n=t.algo,o=[],i=[],s=[],a=n.Rabbit=e.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,n=0;n<4;n++)t[n]=16711935&(t[n]<<8|t[n]>>>24)|4278255360&(t[n]<<24|t[n]>>>8);var r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],o=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];for(this._b=0,n=0;n<4;n++)c.call(this);for(n=0;n<8;n++)o[n]^=r[n+4&7];if(e){var i=e.words,s=i[0],a=i[1],u=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),l=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),h=u>>>16|4294901760&l,f=l<<16|65535&u;for(o[0]^=u,o[1]^=h,o[2]^=l,o[3]^=f,o[4]^=u,o[5]^=h,o[6]^=l,o[7]^=f,n=0;n<4;n++)c.call(this)}},_doProcessBlock:function(t,e){var n=this._X;c.call(this),o[0]=n[0]^n[5]>>>16^n[3]<<16,o[1]=n[2]^n[7]>>>16^n[5]<<16,o[2]=n[4]^n[1]>>>16^n[7]<<16,o[3]=n[6]^n[3]>>>16^n[1]<<16;for(var r=0;r<4;r++)o[r]=16711935&(o[r]<<8|o[r]>>>24)|4278255360&(o[r]<<24|o[r]>>>8),t[e+r]^=o[r]},blockSize:4,ivSize:2});function c(){for(var t=this._X,e=this._C,n=0;n<8;n++)i[n]=e[n];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<i[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<i[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<i[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<i[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<i[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<i[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<i[6]>>>0?1:0)|0,this._b=e[7]>>>0<i[7]>>>0?1:0,n=0;n<8;n++){var r=t[n]+e[n],o=65535&r,a=r>>>16,c=((o*o>>>17)+o*a>>>15)+a*a,u=((4294901760&r)*r|0)+((65535&r)*r|0);s[n]=c^u}t[0]=s[0]+(s[7]<<16|s[7]>>>16)+(s[6]<<16|s[6]>>>16)|0,t[1]=s[1]+(s[0]<<8|s[0]>>>24)+s[7]|0,t[2]=s[2]+(s[1]<<16|s[1]>>>16)+(s[0]<<16|s[0]>>>16)|0,t[3]=s[3]+(s[2]<<8|s[2]>>>24)+s[1]|0,t[4]=s[4]+(s[3]<<16|s[3]>>>16)+(s[2]<<16|s[2]>>>16)|0,t[5]=s[5]+(s[4]<<8|s[4]>>>24)+s[3]|0,t[6]=s[6]+(s[5]<<16|s[5]>>>16)+(s[4]<<16|s[4]>>>16)|0,t[7]=s[7]+(s[6]<<8|s[6]>>>24)+s[5]|0}t.Rabbit=e._createHelper(a)}(),r.Rabbit)},857:function(t,e,n){var r;t.exports=(r=n(249),n(269),n(214),n(888),n(109),function(){var t=r,e=t.lib.StreamCipher,n=t.algo,o=n.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,n=t.sigBytes,r=this._S=[],o=0;o<256;o++)r[o]=o;o=0;for(var i=0;o<256;o++){var s=o%n,a=e[s>>>2]>>>24-s%4*8&255;i=(i+r[o]+a)%256;var c=r[o];r[o]=r[i],r[i]=c}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=i.call(this)},keySize:8,ivSize:0});function i(){for(var t=this._S,e=this._i,n=this._j,r=0,o=0;o<4;o++){n=(n+t[e=(e+1)%256])%256;var i=t[e];t[e]=t[n],t[n]=i,r|=t[(t[e]+t[n])%256]<<24-8*o}return this._i=e,this._j=n,r}t.RC4=e._createHelper(o);var s=n.RC4Drop=o.extend({cfg:o.cfg.extend({drop:192}),_doReset:function(){o._doReset.call(this);for(var t=this.cfg.drop;t>0;t--)i.call(this)}});t.RC4Drop=e._createHelper(s)}(),r.RC4)},706:function(t,e,n){var r;t.exports=(r=n(249),function(t){var e=r,n=e.lib,o=n.WordArray,i=n.Hasher,s=e.algo,a=o.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),c=o.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),u=o.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),l=o.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),h=o.create([0,1518500249,1859775393,2400959708,2840853838]),f=o.create([1352829926,1548603684,1836072691,2053994217,0]),p=s.RIPEMD160=i.extend({_doReset:function(){this._hash=o.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var n=0;n<16;n++){var r=e+n,o=t[r];t[r]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8)}var i,s,p,w,m,k,x,S,B,P,C,O=this._hash.words,A=h.words,E=f.words,U=a.words,j=c.words,H=u.words,D=l.words;for(k=i=O[0],x=s=O[1],S=p=O[2],B=w=O[3],P=m=O[4],n=0;n<80;n+=1)C=i+t[e+U[n]]|0,C+=n<16?d(s,p,w)+A[0]:n<32?y(s,p,w)+A[1]:n<48?v(s,p,w)+A[2]:n<64?b(s,p,w)+A[3]:_(s,p,w)+A[4],C=(C=g(C|=0,H[n]))+m|0,i=m,m=w,w=g(p,10),p=s,s=C,C=k+t[e+j[n]]|0,C+=n<16?_(x,S,B)+E[0]:n<32?b(x,S,B)+E[1]:n<48?v(x,S,B)+E[2]:n<64?y(x,S,B)+E[3]:d(x,S,B)+E[4],C=(C=g(C|=0,D[n]))+P|0,k=P,P=B,B=g(S,10),S=x,x=C;C=O[1]+p+B|0,O[1]=O[2]+w+P|0,O[2]=O[3]+m+k|0,O[3]=O[4]+i+x|0,O[4]=O[0]+s+S|0,O[0]=C},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,r=8*t.sigBytes;e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),t.sigBytes=4*(e.length+1),this._process();for(var o=this._hash,i=o.words,s=0;s<5;s++){var a=i[s];i[s]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}return o},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});function d(t,e,n){return t^e^n}function y(t,e,n){return t&e|~t&n}function v(t,e,n){return(t|~e)^n}function b(t,e,n){return t&n|e&~n}function _(t,e,n){return t^(e|~n)}function g(t,e){return t<<e|t>>>32-e}e.RIPEMD160=i._createHelper(p),e.HmacRIPEMD160=i._createHmacHelper(p)}(Math),r.RIPEMD160)},783:function(t,e,n){var r,o,i,s,a,c,u,l;t.exports=(o=(r=l=n(249)).lib,i=o.WordArray,s=o.Hasher,a=r.algo,c=[],u=a.SHA1=s.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],s=n[3],a=n[4],u=0;u<80;u++){if(u<16)c[u]=0|t[e+u];else{var l=c[u-3]^c[u-8]^c[u-14]^c[u-16];c[u]=l<<1|l>>>31}var h=(r<<5|r>>>27)+a+c[u];h+=u<20?1518500249+(o&i|~o&s):u<40?1859775393+(o^i^s):u<60?(o&i|o&s|i&s)-1894007588:(o^i^s)-899497514,a=s,s=i,i=o<<30|o>>>2,o=r,r=h}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+i|0,n[3]=n[3]+s|0,n[4]=n[4]+a|0},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,r=8*t.sigBytes;return e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=Math.floor(n/4294967296),e[15+(r+64>>>9<<4)]=n,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=s.clone.call(this);return t._hash=this._hash.clone(),t}}),r.SHA1=s._createHelper(u),r.HmacSHA1=s._createHmacHelper(u),l.SHA1)},792:function(t,e,n){var r,o,i,s,a,c;t.exports=(c=n(249),n(153),o=(r=c).lib.WordArray,i=r.algo,s=i.SHA256,a=i.SHA224=s.extend({_doReset:function(){this._hash=new o.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=s._doFinalize.call(this);return t.sigBytes-=4,t}}),r.SHA224=s._createHelper(a),r.HmacSHA224=s._createHmacHelper(a),c.SHA224)},153:function(t,e,n){var r;t.exports=(r=n(249),function(t){var e=r,n=e.lib,o=n.WordArray,i=n.Hasher,s=e.algo,a=[],c=[];!function(){function e(e){for(var n=t.sqrt(e),r=2;r<=n;r++)if(!(e%r))return!1;return!0}function n(t){return 4294967296*(t-(0|t))|0}for(var r=2,o=0;o<64;)e(r)&&(o<8&&(a[o]=n(t.pow(r,.5))),c[o]=n(t.pow(r,1/3)),o++),r++}();var u=[],l=s.SHA256=i.extend({_doReset:function(){this._hash=new o.init(a.slice(0))},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],s=n[3],a=n[4],l=n[5],h=n[6],f=n[7],p=0;p<64;p++){if(p<16)u[p]=0|t[e+p];else{var d=u[p-15],y=(d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3,v=u[p-2],b=(v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10;u[p]=y+u[p-7]+b+u[p-16]}var _=r&o^r&i^o&i,g=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),w=f+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&l^~a&h)+c[p]+u[p];f=h,h=l,l=a,a=s+w|0,s=i,i=o,o=r,r=w+(g+_)|0}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+i|0,n[3]=n[3]+s|0,n[4]=n[4]+a|0,n[5]=n[5]+l|0,n[6]=n[6]+h|0,n[7]=n[7]+f|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,o=8*e.sigBytes;return n[o>>>5]|=128<<24-o%32,n[14+(o+64>>>9<<4)]=t.floor(r/4294967296),n[15+(o+64>>>9<<4)]=r,e.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=i._createHelper(l),e.HmacSHA256=i._createHmacHelper(l)}(Math),r.SHA256)},327:function(t,e,n){var r;t.exports=(r=n(249),n(938),function(t){var e=r,n=e.lib,o=n.WordArray,i=n.Hasher,s=e.x64.Word,a=e.algo,c=[],u=[],l=[];!function(){for(var t=1,e=0,n=0;n<24;n++){c[t+5*e]=(n+1)*(n+2)/2%64;var r=(2*t+3*e)%5;t=e%5,e=r}for(t=0;t<5;t++)for(e=0;e<5;e++)u[t+5*e]=e+(2*t+3*e)%5*5;for(var o=1,i=0;i<24;i++){for(var a=0,h=0,f=0;f<7;f++){if(1&o){var p=(1<<f)-1;p<32?h^=1<<p:a^=1<<p-32}128&o?o=o<<1^113:o<<=1}l[i]=s.create(a,h)}}();var h=[];!function(){for(var t=0;t<25;t++)h[t]=s.create()}();var f=a.SHA3=i.extend({cfg:i.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new s.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var n=this._state,r=this.blockSize/2,o=0;o<r;o++){var i=t[e+2*o],s=t[e+2*o+1];i=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),s=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),(O=n[o]).high^=s,O.low^=i}for(var a=0;a<24;a++){for(var f=0;f<5;f++){for(var p=0,d=0,y=0;y<5;y++)p^=(O=n[f+5*y]).high,d^=O.low;var v=h[f];v.high=p,v.low=d}for(f=0;f<5;f++){var b=h[(f+4)%5],_=h[(f+1)%5],g=_.high,w=_.low;for(p=b.high^(g<<1|w>>>31),d=b.low^(w<<1|g>>>31),y=0;y<5;y++)(O=n[f+5*y]).high^=p,O.low^=d}for(var m=1;m<25;m++){var k=(O=n[m]).high,x=O.low,S=c[m];S<32?(p=k<<S|x>>>32-S,d=x<<S|k>>>32-S):(p=x<<S-32|k>>>64-S,d=k<<S-32|x>>>64-S);var B=h[u[m]];B.high=p,B.low=d}var P=h[0],C=n[0];for(P.high=C.high,P.low=C.low,f=0;f<5;f++)for(y=0;y<5;y++){var O=n[m=f+5*y],A=h[m],E=h[(f+1)%5+5*y],U=h[(f+2)%5+5*y];O.high=A.high^~E.high&U.high,O.low=A.low^~E.low&U.low}O=n[0];var j=l[a];O.high^=j.high,O.low^=j.low}},_doFinalize:function(){var e=this._data,n=e.words,r=(this._nDataBytes,8*e.sigBytes),i=32*this.blockSize;n[r>>>5]|=1<<24-r%32,n[(t.ceil((r+1)/i)*i>>>5)-1]|=128,e.sigBytes=4*n.length,this._process();for(var s=this._state,a=this.cfg.outputLength/8,c=a/8,u=[],l=0;l<c;l++){var h=s[l],f=h.high,p=h.low;f=16711935&(f<<8|f>>>24)|4278255360&(f<<24|f>>>8),p=16711935&(p<<8|p>>>24)|4278255360&(p<<24|p>>>8),u.push(p),u.push(f)}return new o.init(u,a)},clone:function(){for(var t=i.clone.call(this),e=t._state=this._state.slice(0),n=0;n<25;n++)e[n]=e[n].clone();return t}});e.SHA3=i._createHelper(f),e.HmacSHA3=i._createHmacHelper(f)}(Math),r.SHA3)},460:function(t,e,n){var r,o,i,s,a,c,u,l;t.exports=(l=n(249),n(938),n(34),o=(r=l).x64,i=o.Word,s=o.WordArray,a=r.algo,c=a.SHA512,u=a.SHA384=c.extend({_doReset:function(){this._hash=new s.init([new i.init(3418070365,3238371032),new i.init(1654270250,914150663),new i.init(2438529370,812702999),new i.init(355462360,4144912697),new i.init(1731405415,4290775857),new i.init(2394180231,1750603025),new i.init(3675008525,1694076839),new i.init(1203062813,3204075428)])},_doFinalize:function(){var t=c._doFinalize.call(this);return t.sigBytes-=16,t}}),r.SHA384=c._createHelper(u),r.HmacSHA384=c._createHmacHelper(u),l.SHA384)},34:function(t,e,n){var r;t.exports=(r=n(249),n(938),function(){var t=r,e=t.lib.Hasher,n=t.x64,o=n.Word,i=n.WordArray,s=t.algo;function a(){return o.create.apply(o,arguments)}var c=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],u=[];!function(){for(var t=0;t<80;t++)u[t]=a()}();var l=s.SHA512=e.extend({_doReset:function(){this._hash=new i.init([new o.init(1779033703,4089235720),new o.init(3144134277,2227873595),new o.init(1013904242,4271175723),new o.init(2773480762,1595750129),new o.init(1359893119,2917565137),new o.init(2600822924,725511199),new o.init(528734635,4215389547),new o.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],s=n[3],a=n[4],l=n[5],h=n[6],f=n[7],p=r.high,d=r.low,y=o.high,v=o.low,b=i.high,_=i.low,g=s.high,w=s.low,m=a.high,k=a.low,x=l.high,S=l.low,B=h.high,P=h.low,C=f.high,O=f.low,A=p,E=d,U=y,j=v,H=b,D=_,R=g,T=w,I=m,z=k,W=x,F=S,L=B,M=P,q=C,K=O,N=0;N<80;N++){var G,X,V=u[N];if(N<16)X=V.high=0|t[e+2*N],G=V.low=0|t[e+2*N+1];else{var J=u[N-15],Z=J.high,Q=J.low,Y=(Z>>>1|Q<<31)^(Z>>>8|Q<<24)^Z>>>7,$=(Q>>>1|Z<<31)^(Q>>>8|Z<<24)^(Q>>>7|Z<<25),tt=u[N-2],et=tt.high,nt=tt.low,rt=(et>>>19|nt<<13)^(et<<3|nt>>>29)^et>>>6,ot=(nt>>>19|et<<13)^(nt<<3|et>>>29)^(nt>>>6|et<<26),it=u[N-7],st=it.high,at=it.low,ct=u[N-16],ut=ct.high,lt=ct.low;X=(X=(X=Y+st+((G=$+at)>>>0<$>>>0?1:0))+rt+((G+=ot)>>>0<ot>>>0?1:0))+ut+((G+=lt)>>>0<lt>>>0?1:0),V.high=X,V.low=G}var ht,ft=I&W^~I&L,pt=z&F^~z&M,dt=A&U^A&H^U&H,yt=E&j^E&D^j&D,vt=(A>>>28|E<<4)^(A<<30|E>>>2)^(A<<25|E>>>7),bt=(E>>>28|A<<4)^(E<<30|A>>>2)^(E<<25|A>>>7),_t=(I>>>14|z<<18)^(I>>>18|z<<14)^(I<<23|z>>>9),gt=(z>>>14|I<<18)^(z>>>18|I<<14)^(z<<23|I>>>9),wt=c[N],mt=wt.high,kt=wt.low,xt=q+_t+((ht=K+gt)>>>0<K>>>0?1:0),St=bt+yt;q=L,K=M,L=W,M=F,W=I,F=z,I=R+(xt=(xt=(xt=xt+ft+((ht+=pt)>>>0<pt>>>0?1:0))+mt+((ht+=kt)>>>0<kt>>>0?1:0))+X+((ht+=G)>>>0<G>>>0?1:0))+((z=T+ht|0)>>>0<T>>>0?1:0)|0,R=H,T=D,H=U,D=j,U=A,j=E,A=xt+(vt+dt+(St>>>0<bt>>>0?1:0))+((E=ht+St|0)>>>0<ht>>>0?1:0)|0}d=r.low=d+E,r.high=p+A+(d>>>0<E>>>0?1:0),v=o.low=v+j,o.high=y+U+(v>>>0<j>>>0?1:0),_=i.low=_+D,i.high=b+H+(_>>>0<D>>>0?1:0),w=s.low=w+T,s.high=g+R+(w>>>0<T>>>0?1:0),k=a.low=k+z,a.high=m+I+(k>>>0<z>>>0?1:0),S=l.low=S+F,l.high=x+W+(S>>>0<F>>>0?1:0),P=h.low=P+M,h.high=B+L+(P>>>0<M>>>0?1:0),O=f.low=O+K,f.high=C+q+(O>>>0<K>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,r=8*t.sigBytes;return e[r>>>5]|=128<<24-r%32,e[30+(r+128>>>10<<5)]=Math.floor(n/4294967296),e[31+(r+128>>>10<<5)]=n,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(l),t.HmacSHA512=e._createHmacHelper(l)}(),r.SHA512)},253:function(t,e,n){var r;t.exports=(r=n(249),n(269),n(214),n(888),n(109),function(){var t=r,e=t.lib,n=e.WordArray,o=e.BlockCipher,i=t.algo,s=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],a=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],c=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],u=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],l=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],h=i.DES=o.extend({_doReset:function(){for(var t=this._key.words,e=[],n=0;n<56;n++){var r=s[n]-1;e[n]=t[r>>>5]>>>31-r%32&1}for(var o=this._subKeys=[],i=0;i<16;i++){var u=o[i]=[],l=c[i];for(n=0;n<24;n++)u[n/6|0]|=e[(a[n]-1+l)%28]<<31-n%6,u[4+(n/6|0)]|=e[28+(a[n+24]-1+l)%28]<<31-n%6;for(u[0]=u[0]<<1|u[0]>>>31,n=1;n<7;n++)u[n]=u[n]>>>4*(n-1)+3;u[7]=u[7]<<5|u[7]>>>27}var h=this._invSubKeys=[];for(n=0;n<16;n++)h[n]=o[15-n]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,n){this._lBlock=t[e],this._rBlock=t[e+1],f.call(this,4,252645135),f.call(this,16,65535),p.call(this,2,858993459),p.call(this,8,16711935),f.call(this,1,1431655765);for(var r=0;r<16;r++){for(var o=n[r],i=this._lBlock,s=this._rBlock,a=0,c=0;c<8;c++)a|=u[c][((s^o[c])&l[c])>>>0];this._lBlock=s,this._rBlock=i^a}var h=this._lBlock;this._lBlock=this._rBlock,this._rBlock=h,f.call(this,1,1431655765),p.call(this,8,16711935),p.call(this,2,858993459),f.call(this,16,65535),f.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function f(t,e){var n=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=n,this._lBlock^=n<<t}function p(t,e){var n=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=n,this._rBlock^=n<<t}t.DES=o._createHelper(h);var d=i.TripleDES=o.extend({_doReset:function(){var t=this._key.words;if(2!==t.length&&4!==t.length&&t.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=t.slice(0,2),r=t.length<4?t.slice(0,2):t.slice(2,4),o=t.length<6?t.slice(0,2):t.slice(4,6);this._des1=h.createEncryptor(n.create(e)),this._des2=h.createEncryptor(n.create(r)),this._des3=h.createEncryptor(n.create(o))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=o._createHelper(d)}(),r.TripleDES)},938:function(t,e,n){var r,o,i,s,a,c;t.exports=(r=n(249),i=(o=r).lib,s=i.Base,a=i.WordArray,(c=o.x64={}).Word=s.extend({init:function(t,e){this.high=t,this.low=e}}),c.WordArray=s.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,n=[],r=0;r<e;r++){var o=t[r];n.push(o.high),n.push(o.low)}return a.create(n,this.sigBytes)},clone:function(){for(var t=s.clone.call(this),e=t.words=this.words.slice(0),n=e.length,r=0;r<n;r++)e[r]=e[r].clone();return t}}),r)},480:()=>{}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};return(()=>{"use strict";n.r(r),n.d(r,{AxiosRequestDriver:()=>i,BrowserStorage:()=>V,FetchRequestDriver:()=>c,FgAPI:()=>it,LogSession:()=>ct,LogType:()=>t,MemoryStorage:()=>J,getInstance:()=>ut,initialize:()=>ft,initializeWithToken:()=>yt});var t,e=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},o=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=function(){function t(t){if(this.axios=t,!t)throw new Error("Axios library is missing.")}return t.prototype.send=function(t,n,r,i,s,a,c){return e(this,void 0,void 0,(function(){var e;return o(this,(function(o){switch(o.label){case 0:return e={baseURL:n,url:r,method:t,withCredentials:s,headers:a},"blob"===c&&(e.responseType="blob"),void 0!==i&&"GET"!==t&&(e.data=i),[4,this.axios(e)];case 1:return[2,o.sent()]}}))}))},t.prototype.upload=function(t,n,r,i,s,a,c,u){return e(this,void 0,void 0,(function(){var e,l;return o(this,(function(o){switch(o.label){case 0:return(e=new FormData).set("projectId",s||""),e.set("data",i||""),"string"==typeof a&&(a=new Blob([a],{type:"plain/text"})),e.set("files",a,c),l={baseURL:n,data:e,url:r,method:t,withCredentials:!0,headers:u},[4,this.axios(l)];case 1:return[2,o.sent()]}}))}))},t.prototype.getContentAsBlob=function(t){return e(this,void 0,void 0,(function(){return o(this,(function(e){return 204===t.status?[2,void 0]:[2,t.data]}))}))},t.prototype.getContentAsText=function(t){return e(this,void 0,void 0,(function(){return o(this,(function(e){return 204===t.status?[2,void 0]:[2,t.data]}))}))},t.prototype.getBody=function(t){return e(this,void 0,void 0,(function(){return o(this,(function(e){return 204===t.status?[2,void 0]:[2,t.data]}))}))},t.prototype.getHeaders=function(t){return t.headers},t}(),s=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},a=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},c=function(){function t(){}return t.prototype.send=function(t,e,n,r,o,i,c){return s(this,void 0,void 0,(function(){var s,c;return a(this,(function(a){switch(a.label){case 0:return"GET"!==t&&"string"!=typeof r&&(r=JSON.stringify(r),i=Object.assign({},i,{Accept:"application/json","Content-Type":"application/json"})),s=new Request(e+n,{method:t,body:r,headers:new Headers(i),credentials:o?"same-origin":"omit",cache:"no-cache"}),[4,fetch(s)];case 1:return c=a.sent(),[4,this.processFetchResponse(c)];case 2:return[2,a.sent()]}}))}))},t.prototype.upload=function(t,e,n,r,o,i,c,u){return s(this,void 0,void 0,(function(){var s,l,h;return a(this,(function(a){switch(a.label){case 0:return(s=new FormData).set("projectId",o||""),s.set("data",r||""),"string"==typeof i&&(i=new Blob([i],{type:"plain/text"})),s.set("files",i,c),l=new Request(e+n,{method:t,body:s,headers:new Headers(u),credentials:"same-origin",cache:"no-cache"}),[4,fetch(l)];case 1:return h=a.sent(),[4,this.processFetchResponse(h)];case 2:return[2,a.sent()]}}))}))},t.prototype.getContentAsBlob=function(t){return s(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return 204===t.status?[2,void 0]:[4,t.blob()];case 1:return[2,e.sent()]}}))}))},t.prototype.getContentAsText=function(t){return s(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return 204===t.status?[2,void 0]:[4,t.text()];case 1:return[2,e.sent()]}}))}))},t.prototype.getBody=function(t){return s(this,void 0,void 0,(function(){return a(this,(function(e){return 204===t.status?[2,void 0]:[2,t.json()]}))}))},t.prototype.getHeaders=function(t){var e={};return t.headers.forEach((function(t,n,r){e[n]=t})),e},t.prototype.processFetchResponse=function(t){return s(this,void 0,void 0,(function(){var e,n,r,o;return a(this,(function(i){switch(i.label){case 0:if(!((e=t).status<200||e.status>304))return[3,5];n=void 0,i.label=1;case 1:return i.trys.push([1,3,,4]),[4,e.json()];case 2:return(null==(r=i.sent())?void 0:r.message)&&(n=r.message),console.log(r),[3,4];case 3:return o=i.sent(),console.error(o),[3,4];case 4:throw n||(n="Request failed with status code ".concat(e.status)),new Error(n);case 5:return[2,e]}}))}))},t}();!function(t){t[t.Error=0]="Error",t[t.Warn=1]="Warn",t[t.Info=2]="Info",t[t.Http=3]="Http",t[t.Verbose=4]="Verbose",t[t.Debug=5]="Debug",t[t.Silly=6]="Silly"}(t||(t={}));var u,l={development:"http://localhost:3001",production:"https://api.forjagames.com",rapidapi:"https://forja-games.p.rapidapi.com"},h=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},f=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},p=l,d=function(){function t(t){var e=t.requestDriver,n=t.encryptionDriver,r=t.baseUrl,o=void 0===r?null:r,i=t.opts,s=void 0===i?{}:i,a=t.credentialObject,c=void 0===a?null:a;if(!e)throw new Error("RequestDriver is required");if(!n)throw new Error("EncryptionDriver is required");this._requestDriver=e,this._encryptionDriver=n,this._opts=s,this.baseUrl=o||p[s.environment],this.isProduction=s.isProduction,this.environment=s.environment,c?(this.credential=c.credential||null,this.credentialToken=c.token||null,this.credentialOnLogin=c.onLogin||s.onLogin):(this.credential=null,this.credentialToken=null,this.credentialOnLogin=null),this._afterLoad()}return Object.defineProperty(t.prototype,"requestDriver",{get:function(){return this._requestDriver},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"encryptionDriver",{get:function(){return this._encryptionDriver},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"token",{get:function(){return null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"baseUrl",{get:function(){return this._baseUrl},set:function(t){this._baseUrl=t,t.endsWith("/")||(this._baseUrl+="/")},enumerable:!1,configurable:!0}),t.prototype._get=function(t,e){return h(this,void 0,void 0,(function(){var n,r,o;return f(this,(function(i){switch(i.label){case 0:return n=t,e&&(r=Object.keys(e).map((function(t){return"".concat(t,"=").concat(e[t])})).join("&"),n+="?".concat(r)),[4,this._requestDriver.send("GET",this.baseUrl,n,null,null!==this.token,this._createHeaders())];case 1:return o=i.sent(),[4,this._processResult(o)];case 2:return[2,i.sent()]}}))}))},t.prototype._getString=function(t,e){return h(this,void 0,void 0,(function(){var n,r,o;return f(this,(function(i){switch(i.label){case 0:return n=t,e&&(r=Object.keys(e).map((function(t){return"".concat(t,"=").concat(e[t])})).join("&"),n+="?".concat(r)),[4,this._requestDriver.send("GET",this.baseUrl,n,null,null!==this.token,this._createHeaders())];case 1:return o=i.sent(),[4,this._processResult(o,"text")];case 2:return[2,i.sent()]}}))}))},t.prototype._getBlob=function(t,e){return h(this,void 0,void 0,(function(){var n,r,o;return f(this,(function(i){switch(i.label){case 0:return n=t,e&&(r=Object.keys(e).map((function(t){return"".concat(t,"=").concat(e[t])})).join("&"),n+="?".concat(r)),[4,this._requestDriver.send("GET",this.baseUrl,n,null,null!==this.token,this._createHeaders(),"blob")];case 1:return o=i.sent(),[4,this._processResult(o,"blob")];case 2:return[2,i.sent()]}}))}))},t.prototype._delete=function(t,e,n){return h(this,void 0,void 0,(function(){var r;return f(this,(function(o){switch(o.label){case 0:return[4,this._requestDriver.send("DELETE",this.baseUrl,t,e,null!==this.token,this._createHeaders(n))];case 1:return r=o.sent(),[4,this._processResult(r)];case 2:return[2,o.sent()]}}))}))},t.prototype._patch=function(t,e,n){return h(this,void 0,void 0,(function(){var r;return f(this,(function(o){switch(o.label){case 0:return[4,this._requestDriver.send("PATCH",this.baseUrl,t,e,null!==this.token,this._createHeaders(n))];case 1:return r=o.sent(),[4,this._processResult(r)];case 2:return[2,o.sent()]}}))}))},t.prototype._post=function(t,e,n){return h(this,void 0,void 0,(function(){var r;return f(this,(function(o){switch(o.label){case 0:return[4,this._requestDriver.send("POST",this.baseUrl,t,e,null!==this.token,this._createHeaders(n))];case 1:return r=o.sent(),[4,this._processResult(r)];case 2:return[2,o.sent()]}}))}))},t.prototype._upload=function(t,e,n,r,o,i,s){return h(this,void 0,void 0,(function(){return f(this,(function(a){switch(a.label){case 0:return[4,this._requestDriver.upload("POST",t,e,n,r,o,i,this._createHeaders(s))];case 1:return a.sent(),[2]}}))}))},t.prototype._processResult=function(t,e){return void 0===e&&(e="json"),h(this,void 0,void 0,(function(){var n,r;return f(this,(function(o){switch(o.label){case 0:return n=this._requestDriver.getHeaders(t)||{},"text"!==e?[3,2]:[4,this._requestDriver.getContentAsText(t)];case 1:return[2,o.sent()];case 2:return"blob"!==e?[3,4]:[4,this._requestDriver.getContentAsBlob(t)];case 3:return[2,o.sent()];case 4:return[4,this._requestDriver.getBody(t)];case 5:return(r=o.sent())&&"object"==typeof r&&r.extraHeaders&&Object.assign(n,r.extraHeaders),n["Api-New-Token"]&&this.credentialOnLogin?[4,this.credentialOnLogin(n["Api-New-Token"])]:[3,7];case 6:o.sent(),o.label=7;case 7:return[2,r]}}))}))},t.prototype._afterLoad=function(){},t.prototype._createHeaders=function(t){var e=t||{};if(this.token?e.Authorization="Bearer ".concat(this.token):this.credentialToken?e["Api-Token"]=this.credentialToken:this.credential&&(e["Api-Authorization"]=this.credential),"rapidapi"===this.environment){e["X-RapidAPI-Key"]=this._opts.keys.rapidapi;var n=this.baseUrl.replace("https://","");n.includes("/")&&(n=n.substring(0,n.indexOf("/"))),e["X-RapidAPI-Host"]=n}return e},t}(),y=(u=function(t,e){return u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},u(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return y(e,t),e.prototype._afterLoad=function(){this.baseUrl+="api/credential/"},e.prototype.isWorking=function(){return this._post("status",{})},e}(d),b=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_=function(){return _=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},_.apply(this,arguments)},g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return b(e,t),e.prototype._afterLoad=function(){this.baseUrl+="api/functions/"},e.prototype.runRecipe=function(t,e){return this._post("recipe/run/".concat(t),e?_({},e):{})},e}(d),w=function(){function t(){}return t.sleep=function(t){return new Promise((function(e){setTimeout((function(){return e()}),t)}))},t.waitFor=function(e,n,r){return void 0===n&&(n=100),void 0===r&&(r=0),o=this,i=void 0,a=function(){var o;return function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(i){switch(i.label){case 0:n=n||100,o=(r=r||0)>0,i.label=1;case 1:return e()||o&&!(r>0)?[3,3]:[4,t.sleep(n)];case 2:return i.sent(),r-=n,[3,1];case 3:if(o&&r<=0)throw new Error("Timeout");return[2]}}))},new((s=void 0)||(s=Promise))((function(t,e){function n(t){try{c(a.next(t))}catch(t){e(t)}}function r(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var o;e.done?t(e.value):(o=e.value,o instanceof s?o:new s((function(t){t(o)}))).then(n,r)}c((a=a.apply(o,i||[])).next())}));var o,i,s,a},t}(),m=function(){function t(){}return t.stringToBase64=function(t){return window&&window.btoa?window.btoa(t):Buffer.from(t).toString("base64")},t.base64ToString=function(t){return window&&window.atob?window.atob(t):Buffer.from(t,"base64").toString("utf8")},t}(),k=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),x=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},S=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},B=function(t){function e(e){var n=t.call(this,e)||this,r=e.token,o=e.cache,i=void 0===o||o;return n.cache=i,n._tokenForURL=r,n._window=null,n}return k(e,t),Object.defineProperty(e.prototype,"baseIdentityUrl",{get:function(){var t=this.isProduction?l.production:l.development;return t.endsWith("/")||(t+="/"),t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"identityPublicUrl",{get:function(){return"".concat(this.baseIdentityUrl,"api/identity/public")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"changePasswordUrl",{get:function(){var t="".concat(this.identityPublicUrl,"/password?"),e=JSON.stringify(this._createHeaders()),n=m.stringToBase64(e);return t+="headers=".concat(n),this.cache||(t+="&cache=false"),t},enumerable:!1,configurable:!0}),e.prototype.getViewProfileUrl=function(t){var e="".concat(this.identityPublicUrl,"/profile/").concat(t,"?"),n=JSON.stringify(this._createHeaders()),r=m.stringToBase64(n);return e+="headers=".concat(r),this.cache||(e+="&cache=false"),e},Object.defineProperty(e.prototype,"removeAccountUrl",{get:function(){var t="".concat(this.identityPublicUrl,"/delete?"),e=JSON.stringify(this._createHeaders()),n=m.stringToBase64(e);return t+="headers=".concat(n),this.cache||(t+="&cache=false"),t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loginUrl",{get:function(){var t="".concat(this.identityPublicUrl,"?api-authorization=").concat(this._tokenForURL);return this.cache||(t+="&cache=false"),t},enumerable:!1,configurable:!0}),e.prototype._afterLoad=function(){this.baseUrl+="api/identity/"},e.prototype.tryToRelogin=function(t,e,n){return x(this,void 0,void 0,(function(){return S(this,(function(r){switch(r.label){case 0:return[4,this._post("login/token",{token:t,refresh:e,session:n})];case 1:return[2,r.sent()]}}))}))},e.prototype.preLogin=function(t){return x(this,void 0,void 0,(function(){return S(this,(function(e){switch(e.label){case 0:return[4,this._post("login/code",{code:t})];case 1:return[2,e.sent().secret]}}))}))},e.prototype.getAndUsePreLoginCode=function(t,e){return x(this,void 0,void 0,(function(){var n,r,o,i;return S(this,(function(s){switch(s.label){case 0:return[4,this._delete("login/code",{code:t,secret:e})];case 1:return(n=s.sent()).ready?(r=n.ready,o=n.reloginToken,i=n.token,[2,{ready:r,reloginToken:o,token:i}]):[2,{ready:!1}]}}))}))},e.prototype.openLoginWithRedirect=function(){location.href=this.loginUrl+"&redirect="+encodeURIComponent(location.href)},e.prototype.openChangePasswordWithRedirect=function(){location.href=this.changePasswordUrl+"&redirect="+encodeURIComponent(location.href)},e.prototype.openViewProfileWithRedirect=function(t){location.href=this.getViewProfileUrl(t)+"&redirect="+encodeURIComponent(location.href)},e.prototype.openRemoveAccountWithRedirect=function(t){location.href=this.removeAccountUrl+"&redirect="+encodeURIComponent(location.href)},e.prototype.openChangePasswordWindow=function(){return x(this,void 0,void 0,(function(){return S(this,(function(t){switch(t.label){case 0:return[4,this.__openWindowAndWaitForResult(this.changePasswordUrl,"Change Password")];case 1:return[2,t.sent()]}}))}))},e.prototype.openViewProfileWindow=function(t){return x(this,void 0,void 0,(function(){var e,n;return S(this,(function(r){switch(r.label){case 0:if(e=this.getViewProfileUrl(t),null===(n=this._openWindow(e,"User Profile")))throw new Error("Your browser has blocked the creation of windows. Please enable it.");return[4,w.waitFor((function(){return n.closed}))];case 1:return r.sent(),[2]}}))}))},e.prototype.openRemoveAccountWindow=function(){return x(this,void 0,void 0,(function(){return S(this,(function(t){switch(t.label){case 0:return[4,this.__openWindowAndWaitForResult(this.removeAccountUrl,"Remove Account")];case 1:return[2,t.sent()]}}))}))},e.prototype.__openWindowAndWaitForResult=function(t,e){return x(this,void 0,void 0,(function(){var n=this;return S(this,(function(r){return[2,new Promise((function(r,o){var i=n._openWindow(t,e);if(null===i)return o("Your browser has blocked the creation of windows. Please enable it.");window.addEventListener("message",(function(t){n.__waitForResult(r,o,t)})),w.waitFor((function(){return i.closed})).finally((function(){return setTimeout((function(){return o("Cancelled")}),500)}))}))]}))}))},e.prototype.__waitForResult=function(t,e,n){if(n.data){var r=void 0;try{r="string"==typeof n.data?JSON.parse(n.data):n.data}catch(t){return void console.error("Error parsing window message",t)}var o=!!n.data.target;void 0===r.data||o||(r.success?t(r.data):e(r.data.error))}},e.prototype.openLoginWindow=function(){var t=this;return new Promise((function(e,n){t._window=t._openWindow(t.loginUrl,"Login"),window.addEventListener("message",(function(r){t.__waitForResult(e,n,r)}))}))},e.prototype.getLoginUrl=function(t,e,n,r){var o=this.identityPublicUrl+"?",i=[],s=function(t){return r?encodeURI(t):t};return e&&i.push("redirect=".concat(s(e))),n&&i.push("sid=".concat(s(n))),t||i.push("cache=false"),i.push("api-authorization=".concat(this._tokenForURL)),o+i.join("&")},e.prototype.getLoggedProfile=function(t){return this.getUserProfile("me",t)},e.prototype.getUserProfile=function(t,e){t=t||"me";var n={};return e&&(n.scope=e.join(",")),this._get("user/account/".concat(t),n)},e.prototype.updateUserProfile=function(t){return this._patch("user/account",t)},e.prototype.changePassword=function(t,e){return this._patch("user/password",{oldPassword:t,newPassword:e})},e.prototype.logout=function(){return this._post("session/logout",{})},e.prototype._openWindow=function(t,e){return window.open(t,e,"width=800,height=600")},e}(d),P=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),C=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return P(e,t),e.prototype._afterLoad=function(){this.baseUrl+="api/leaderboards/"},e.prototype.getList=function(){return this.listBoards(!1)},e.prototype.getListFilled=function(){return this.listBoards(!0)},e.prototype.getBoard=function(t){return this._get("board/".concat(t))},e.prototype.addScore=function(t,e,n,r,o){return void 0===n&&(n=null),void 0===r&&(r=null),void 0===o&&(o=null),this._post("board/".concat(t),{id:t,score:e,name:n,matchId:r,refId:o})},e.prototype.addScoreWithProtection=function(t,e,n,r,o,i,s){void 0===r&&(r=null),void 0===o&&(o=null),void 0===i&&(i=null),void 0===s&&(s=null);var a=(new Date).getTime(),c=[t.toString(),null!=r?r:"",null!=o?o:"",null!=i?i:"",e.toString(),a.toString(),null!=s?s:"",n].join(":"),u=this.encryptionDriver.getSha256HashBase64(c);return this._post("board/".concat(t),{id:t,score:e,name:r,matchId:o,refId:i,timestamp:a,token:u})},e.prototype.listBoards=function(t){return t?this._get("board",{fill:!0}):this._get("board")},e}(d),O=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),A=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return O(e,t),e.prototype._afterLoad=function(){this.baseUrl+="api/logger/"},e.prototype.createSession=function(){return this._post("session",{})},e.prototype.addRawEntry=function(t,e,n){var r=Object.assign({},n,{sessionId:t}),o=this._getSessionExtraHeaders(t,e);return this._post("entry",r,o)},e.prototype.addEntry=function(t,e,n,r,o,i){var s=this._getSessionExtraHeaders(t,e);return this._post("entry",{sessionId:t,type:n,message:r,category:o,date:i||new Date},s)},e.prototype.closeSession=function(t,e){var n=this._getSessionExtraHeaders(t,e);return this._delete("session/".concat(t),void 0,n)},e.prototype._getSessionExtraHeaders=function(t,e){return e?{"x-logger-session":m.stringToBase64("".concat(t,":").concat(e))}:null},e}(d),E=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),U=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return E(e,t),e.prototype._afterLoad=function(){this.baseUrl+="api/storage/"},e.prototype.connect=function(t,e,n,r){return o=this,i=void 0,a=function(){var o,i;return function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(s){switch(s.label){case 0:return o={id:n,pwd:r},[4,this._post("".concat(e,"/").concat(t),o)];case 1:return i=s.sent(),[2,{databaseUuid:t,token:i.token}]}}))},new((s=void 0)||(s=Promise))((function(t,e){function n(t){try{c(a.next(t))}catch(t){e(t)}}function r(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var o;e.done?t(e.value):(o=e.value,o instanceof s?o:new s((function(t){t(o)}))).then(n,r)}c((a=a.apply(o,i||[])).next())}));var o,i,s,a},e}(d),j=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),H=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},D=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},R=function(t){function e(e){var n=t.call(this,e)||this;return n.dbCredentials=e.dbCredentials,n.decodedCredentials=e.decodedCredentials,n}return j(e,t),Object.defineProperty(e.prototype,"databaseUuid",{get:function(){return this.dbCredentials.databaseUuid},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"projectId",{get:function(){return this.decodedCredentials.projectId},enumerable:!1,configurable:!0}),e.prototype._afterLoad=function(){this.baseUrl+="api/storage/files/"},e.prototype.disconnect=function(){return H(this,void 0,void 0,(function(){return D(this,(function(t){switch(t.label){case 0:return[4,this._delete("".concat(this.databaseUuid))];case 1:return t.sent(),[2]}}))}))},e.prototype.uploadString=function(t,e){return H(this,void 0,void 0,(function(){return D(this,(function(n){switch(n.label){case 0:return[4,this.uploadFile(t,e)];case 1:return n.sent(),[2]}}))}))},e.prototype.uploadFile=function(t,e){return H(this,void 0,void 0,(function(){var n,r;return D(this,(function(o){switch(o.label){case 0:if(r=(t||"").lastIndexOf("/"),!(n=-1!==r?t.substring(r+1):t))throw new Error("Filename cannot be empty.");return[4,this._upload(this.baseUrl.replace("/api/","/files/"),"content/".concat(this.databaseUuid,"/").concat(t),null,this.projectId,e,n)];case 1:return o.sent(),[2]}}))}))},e.prototype.getFileId=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._get("id/".concat(this.databaseUuid,"/").concat(t))];case 1:return[2,e.sent().id]}}))}))},e.prototype.getDownloadUrl=function(t){var e=this._createHeaders(),n=m.stringToBase64(JSON.stringify(e));return"".concat(this.baseUrl,"content/").concat(this.databaseUuid,"/").concat(t,"?headers=").concat(n,"&download=true")},e.prototype.getDownloadByIdUrl=function(t){var e=this._createHeaders(),n=m.stringToBase64(JSON.stringify(e));return"".concat(this.baseUrl,"download/").concat(this.databaseUuid,"/").concat(t,"?headers=").concat(n,"&download=true")},e.prototype.download=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){return n=this.getDownloadUrl(t),(r=document.createElement("a")).href=n,document.body.appendChild(r),r.click(),r.remove(),[2];var n,r}))}))},e.prototype.downloadById=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){return n=this.getDownloadByIdUrl(t),(r=document.createElement("a")).href=n,document.body.appendChild(r),r.click(),r.remove(),[2];var n,r}))}))},e.prototype.downloadAsTextById=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._getString("download/".concat(this.databaseUuid,"/").concat(t))];case 1:return[2,e.sent()]}}))}))},e.prototype.downloadAsJsonById=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._get("download/".concat(this.databaseUuid,"/").concat(t))];case 1:return[2,e.sent()]}}))}))},e.prototype.downloadAsBlobById=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._getBlob("download/".concat(this.databaseUuid,"/").concat(t))];case 1:return[2,e.sent()]}}))}))},e.prototype.downloadAsText=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._getString("content/".concat(this.databaseUuid,"/").concat(t))];case 1:return[2,e.sent()]}}))}))},e.prototype.downloadAsJson=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._get("content/".concat(this.databaseUuid,"/").concat(t))];case 1:return[2,e.sent()]}}))}))},e.prototype.downloadAsBlob=function(t){return H(this,void 0,void 0,(function(){var e;return D(this,(function(n){switch(n.label){case 0:return[4,this.getFileId(t)];case 1:return e=n.sent(),[4,this.downloadAsBlobById(e)];case 2:return[2,n.sent()]}}))}))},e.prototype.find=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/find"),{path:t})];case 1:return[2,e.sent().values]}}))}))},e.prototype.exists=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/exists"),{path:t})];case 1:return[2,e.sent().exists]}}))}))},e.prototype.deleteFile=function(t){return H(this,void 0,void 0,(function(){return D(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/del"),{path:t})];case 1:return[2,e.sent().deleted]}}))}))},e.prototype._createHeaders=function(e){var n=t.prototype._createHeaders.call(this,e);return this.dbCredentials&&(n["x-database-session"]=this.dbCredentials.token),n},e}(d),T=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),I=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},z=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},W=function(t){function e(e){var n=t.call(this,e)||this;return n.dbCredentials=e.dbCredentials,n.decodedCredentials=e.decodedCredentials,n}return T(e,t),Object.defineProperty(e.prototype,"databaseUuid",{get:function(){return this.dbCredentials.databaseUuid},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"connectionId",{get:function(){return this.decodedCredentials.id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"projectId",{get:function(){return this.decodedCredentials.projectId},enumerable:!1,configurable:!0}),e.prototype._afterLoad=function(){this.baseUrl+="api/storage/kevin/"},e.prototype.connectWithIdentity=function(t,e){return I(this,void 0,void 0,(function(){return z(this,(function(n){switch(n.label){case 0:return[4,t.connect(e,"kevin","$identity",null)];case 1:return[2,n.sent()]}}))}))},e.prototype.disconnect=function(){return I(this,void 0,void 0,(function(){return z(this,(function(t){switch(t.label){case 0:return[4,this._delete("".concat(this.databaseUuid))];case 1:return t.sent(),[2]}}))}))},e.prototype.getValue=function(t){return I(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/get"),{path:t})];case 1:return[2,e.sent().value]}}))}))},e.prototype.find=function(t){return I(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/find"),{path:t})];case 1:return[2,e.sent().values]}}))}))},e.prototype.findKeys=function(t){return I(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/findKeys"),{path:t})];case 1:return[2,e.sent().routes]}}))}))},e.prototype.findOne=function(t){return I(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/findOne"),{path:t})];case 1:return[2,e.sent().tuple]}}))}))},e.prototype.addValue=function(t,e){return I(this,void 0,void 0,(function(){return z(this,(function(n){switch(n.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/add"),{path:t,value:e})];case 1:return n.sent(),[2]}}))}))},e.prototype.setValue=function(t,e){return I(this,void 0,void 0,(function(){return z(this,(function(n){switch(n.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/set"),{path:t,value:e})];case 1:return n.sent(),[2]}}))}))},e.prototype.move=function(t,e){return I(this,void 0,void 0,(function(){return z(this,(function(n){switch(n.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/move"),{path:t,newPath:e})];case 1:return n.sent(),[2]}}))}))},e.prototype.rename=function(t,e){return I(this,void 0,void 0,(function(){return z(this,(function(n){switch(n.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/ren"),{path:t,newName:e})];case 1:return n.sent(),[2]}}))}))},e.prototype.exists=function(t){return I(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/exists"),{path:t})];case 1:return[2,e.sent().exists]}}))}))},e.prototype.deleteValue=function(t){return I(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this._post("".concat(this.databaseUuid,"/del"),{path:t})];case 1:return[2,e.sent().deleted]}}))}))},e.prototype._createHeaders=function(e){var n=t.prototype._createHeaders.call(this,e);return this.dbCredentials&&(n["x-database-session"]=this.dbCredentials.token),n},e}(d),F=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),L=l,M=function(t){function e(e){var n=t.call(this,e)||this,r=e.token,o=e.cache,i=void 0===o||o;return n.cache=i,n._tokenForURL=r,n._buyWindow=null,n}return F(e,t),e.prototype._afterLoad=function(){this.baseUrl+="api/store/"},Object.defineProperty(e.prototype,"productBaseUrl",{get:function(){var t=this.isProduction?L.production:L.development;t.endsWith("/")||(t+="/");var e="".concat(t,"api/store/public/product/:id?api-authorization=").concat(this._tokenForURL);return this.cache||(e+="&cache=false"),e},enumerable:!1,configurable:!0}),e.prototype.listUserWallets=function(){return this._get("blockchain/me")},e.prototype.listProducts=function(){return this._get("product")},e.prototype.listWalletProducts=function(t,e){return this._get("product/from",{address:t,chainId:e})},e.prototype.listAdquiredProducts=function(){return this._get("product/me")},e.prototype.getAdquiredProduct=function(t){return this._get("product/me/".concat(t))},e.prototype.useProduct=function(t,e){return this._post("product/me/".concat(t),{quantity:e})},e.prototype.getProductQuery=function(t,e){var n=["canConsume","hasUnits","getUnits"];if(!n.includes(e))throw new Error("Query ".concat(e," is not supported. Supported queries are: ").concat(n.join(", "),"."));return this._get("product/me/".concat(t),{query:e})},e.prototype.getProductUrl=function(t){return this.productBaseUrl.replace(":id",t)},e.prototype.openProductPageWithRedirect=function(t){location.href=this.getProductUrl(t)+"&redirect="+encodeURIComponent(location.href)},e.prototype.openProductPageWindow=function(t,e,n){var r=this;return new Promise((function(o,i){if(r._buyWindow&&!r._buyWindow.closed)return r._buyWindow.focus(),void i(new Error("Purchase window already open"));var s=!1;r._buyWindow=window.open(r.getProductUrl(t),e||"Store",n||"width=800,height=600"),w.waitFor((function(){return s||r._buyWindow.closed})).finally((function(){s||(i(new Error("Purchase window closed")),s=!0)})),window.onmessage=function(t){if(t.data&&!s){var e="string"==typeof t.data?JSON.parse(t.data):t.data,n=!!t.data.target;void 0===e.data||n||(s=!0,e.success?o(e.data):i(e.data.error))}}}))},e}(d),q=function(){this.isProduction=!0,this.environment="production",this.keys={},this.onLogin=null},K=l,N=function(){function t(t,e,n,r,o){if(null==t)throw new Error("RequestDriver is required");if(null==e)throw new Error("EncryptionDriver is required");this.requestDriver=t,this.encryptionDriver=e,this.opts=null!=r?r:new q,this.baseURL=null!=n?n:K[this.opts.environment],this.credentialObject=o||null}return Object.defineProperty(t.prototype,"rapidAPIKey",{get:function(){return"rapidapi"==this.environment&&this.opts.keys.rapidapi||null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isProduction",{get:function(){return this.opts.isProduction},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"environment",{get:function(){return this.opts.environment},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"onLogin",{get:function(){var t,e;return null!==(e=null===(t=this.credentialObject)||void 0===t?void 0:t.onLogin)&&void 0!==e?e:this.opts.onLogin},enumerable:!1,configurable:!0}),t}(),G=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),X=function(t){function e(e,n,r,o,i,s){var a=t.call(this,n,r,o,i,s)||this;return a.dbCredentials=e,a.decodedCredentials=JSON.parse(a._decodeToken(e.token)),a}return G(e,t),e.prototype._decodeToken=function(t){var e=t.split(".")[1];return m.base64ToString(e)},e}(N),V=function(){function t(){}return t.prototype.save=function(t,e){localStorage.setItem(t,e)},t.prototype.delete=function(t){localStorage.removeItem(t)},t.prototype.read=function(t){return localStorage.getItem(t)},t}(),J=function(){function t(){this.data={}}return t.prototype.save=function(t,e){this.data[t]=e},t.prototype.delete=function(t){delete this.data[t]},t.prototype.read=function(t){return this.data[t]},t}(),Z=n(354),Q=function(){function t(){}return t.prototype.encrypt=function(t,e){return Z.AES.encrypt(t,e).toString()},t.prototype.decrypt=function(t,e){return Z.AES.decrypt(t,e).toString(Z.enc.Utf8)},t.prototype.getSha256HashBase64=function(t){return Z.SHA256(t).toString(Z.enc.Base64)},t}(),Y=function(){function t(t,e){this._storage=t||new J,this._encryption=e||new Q}return Object.defineProperty(t.prototype,"fileName",{get:function(){return"token"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"serialNumber",{get:function(){return"no-serial-number"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"encryptionManager",{get:function(){return this._encryption},enumerable:!1,configurable:!0}),t.prototype._getContent=function(){var t=this._storage.read(this.fileName);if(!t)return null;try{return this.encryptionManager.decrypt(t,this.serialNumber)}catch(t){console.error(t),console.warn("Decryption failed. Deleting file..."),this._storage.delete(this.fileName)}return null},t.prototype.saveContent=function(t){var e=this.encryptionManager.encrypt(t,this.serialNumber);this._storage.save(this.fileName,e)},t.prototype.deleteContent=function(){this._storage.save(this.fileName,"")},t}(),$=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),tt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return $(e,t),e.prototype.loadCredential=function(){var t=this._getContent();if(!t||""===t)return null;var e=t.startsWith("*");return e&&(t=t.substring(1)),{token:t,isKS:e}},e.prototype.saveCredential=function(t){var e=t.key,n=t.secret,r=this._makeTokenFromKS({key:e,secret:n});this.saveContent(r)},e.prototype.saveCredentialToken=function(t){this.saveContent(t)},e.prototype.getKeySecretFromToken=function(t){var e=m.base64ToString(t).split(":");return{key:e[0],secret:e[1]}},e.prototype._makeTokenFromKS=function(t){var e=t.key,n=t.secret,r="".concat(e,":").concat(n),o=m.stringToBase64(r);return"*".concat(o)},e}(Y),et=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),nt=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},rt=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},ot=function(t){function e(e){var n=t.call(this,new V)||this;if(!e)throw new Error("FG Api is required");return n.fgApi=e,n.cache=!0,n.credentials=null,n.sessionId="s-".concat((new Date).getTime()),n}return et(e,t),Object.defineProperty(e.prototype,"fileName",{get:function(){return"identity"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"api",{get:function(){var t=this.fgApi.getIdentity();return t.cache=this.cache,t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isLoggedIn",{get:function(){return!!this.credentials},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"user",{get:function(){var t;return null===(t=this.credentials)||void 0===t?void 0:t.user},enumerable:!1,configurable:!0}),e.prototype.openLoginWindow=function(){return nt(this,void 0,void 0,(function(){var t;return rt(this,(function(e){switch(e.label){case 0:return[4,this.api.openLoginWindow()];case 1:return(t=e.sent())?(this.setCredentials(t),[4,this.tryToRecoverSession()]):[3,3];case 2:return[2,e.sent()];case 3:return[2,!1]}}))}))},e.prototype.openProfileWindow=function(t){var e;return nt(this,void 0,void 0,(function(){return rt(this,(function(n){switch(n.label){case 0:return[4,this.api.openViewProfileWindow(t||(null===(e=this.user)||void 0===e?void 0:e.id))];case 1:return[2,n.sent()]}}))}))},e.prototype.openRemoveAccountWindow=function(){return nt(this,void 0,void 0,(function(){return rt(this,(function(t){switch(t.label){case 0:return[4,this.api.openRemoveAccountWindow()];case 1:return[2,t.sent()]}}))}))},e.prototype.openChangePasswordWindow=function(){return nt(this,void 0,void 0,(function(){return rt(this,(function(t){switch(t.label){case 0:return[4,this.api.openChangePasswordWindow()];case 1:return[2,t.sent()]}}))}))},e.prototype.tryToRecoverSession=function(){return nt(this,void 0,void 0,(function(){var t,e;return rt(this,(function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),this.loadCredentials()?[4,this.api.tryToRelogin(this.credentials.token,this.credentials.reloginToken,this.sessionId)]:[3,2];case 1:return t=n.sent(),this.setCredentials(t),[2,!0];case 2:return[3,4];case 3:return e=n.sent(),console.error(e),[2,!1];case 4:return[2,!1]}}))}))},e.prototype.loadCredentials=function(){return this.credentials=this._getContent(),""===this.credentials&&(this.credentials=null),"string"==typeof this.credentials&&(this.credentials=JSON.parse(this.credentials)),!!this.credentials},e.prototype.logout=function(){return nt(this,void 0,void 0,(function(){var t;return rt(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,3,4]),[4,this.api.logout()];case 1:return e.sent(),[3,4];case 2:return t=e.sent(),console.error(t),[3,4];case 3:return this.clearCredentials(),[7];case 4:return[2]}}))}))},e.prototype.setCredentials=function(t){this.credentials=t,this.saveCredentials()},e.prototype.saveCredentials=function(){this.credentials&&this.saveContent(JSON.stringify(this.credentials))},e.prototype.clearCredentials=function(){this.deleteContent()},e}(Y),it=function(){function t(e){t.instance=this;var n=e.key,r=void 0===n?null:n,o=e.secret,s=void 0===o?null:o,a=e.keySecretToken,u=void 0===a?null:a,l=e.credentialSessionToken,h=void 0===l?null:l,f=e.requestDriver,p=void 0===f?null:f,d=e.encryptionDriver,y=void 0===d?null:d,v=e.baseUrl,b=void 0===v?null:v,_=e.environment,g=void 0===_?"production":_,w=e.timeout,m=void 0===w?30:w,k=e.keys,x=void 0===k?{}:k;if(this._requestDriver=p&&"fetch"!==p?"axios"===p?new i(e.axios||window.axios):p:new c,this._encryptionDriver=y||new Q,!(r&&s||u))throw new Error("Key and secret are required.");if(!["production","development","rapidapi"].includes(g))throw new Error("Environment must be one of: production, development, rapidapi.");this._environment=g,this._timeout=m,this._credentialsMgr=new tt(void 0,this._encryptionDriver),u?this._credentialsMgr.saveCredentialToken(u):this._credentialsMgr.saveCredential({key:r,secret:s});var S=this._credentialsMgr.loadCredential(),B=null==S?void 0:S.token;this._credentials={credential:B||null,token:h||null},this._keys=x,this._baseUrl=b}return Object.defineProperty(t.prototype,"isProduction",{get:function(){return"production"===this._environment||"rapidapi"===this._environment},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"credentialTokenForLogin",{get:function(){var t;return null===(t=this._credentials)||void 0===t?void 0:t.credential},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"credentialToken",{get:function(){var t;return null===(t=this._credentials)||void 0===t?void 0:t.token},enumerable:!1,configurable:!0}),t.prototype.login=function(){return t=this,e=void 0,r=function(){var t,e=this;return function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(n){switch(n.label){case 0:return this._credentials.token?[2]:[4,this._createInstance(v,{onLogin:function(t){e._credentials.token=t}}).isWorking()];case 1:n.sent(),t=this._timeout,n.label=2;case 2:return this._credentials.token?[3,4]:[4,w.sleep(1e3)];case 3:if(n.sent(),0==t--)throw new Error("Timeout reached.");return[3,2];case 4:return[2]}}))},new((n=void 0)||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}));var t,e,n,r},t.prototype.logout=function(){},t.prototype.getKdb=function(t){return new W(this._createKdbAPIConstructorParams(t))},t.prototype.getFiles=function(t){return new R(this._createKdbAPIConstructorParams(t))},t.prototype.getLogger=function(){return this._createInstance(A)},t.prototype.getIdentity=function(){return this._createInstance(B,null,{token:this._credentials.credential})},t.prototype.getStore=function(){return this._createInstance(M,null,{token:this._credentials.credential})},t.prototype.getFunctions=function(){return this._createInstance(g)},t.prototype.getStorage=function(){return this._createInstance(U)},t.prototype.getLeaderboard=function(){return this._createInstance(C)},t.prototype.getIdentitySessionManager=function(){return new ot(this)},t.prototype._createKdbAPIConstructorParams=function(t,e){var n=new q;return Object.assign(n,{environment:this._environment,isProduction:this.isProduction,keys:this._keys,onLogin:e}),new X(t,this._requestDriver,this._encryptionDriver,this._baseUrl,n,this._credentials)},t.prototype._createInstance=function(t,e,n){void 0===e&&(e={});var r={isProduction:this.isProduction,environment:this._environment,keys:this._keys},o=Object.assign({},r,e),i={encryptionDriver:this._encryptionDriver,requestDriver:this._requestDriver,baseUrl:this._baseUrl,opts:o,credentialObject:this._credentials};return n&&Object.assign(i,n),new t(i)},t}(),st=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},at=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},ct=function(){function e(){var t=this;this.id=-1,this.token=null,this.entries=[],this.autoFlush=!0,this._errorCounter=0,this._delay=0,this._interval=setInterval((function(){t.autoFlush&&t._dispatchEntry()}),1e3),this.errorInterceptor=null}return Object.defineProperty(e.prototype,"isInitialized",{get:function(){return this.id>=0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"_api",{get:function(){return it.instance.getLogger()},enumerable:!1,configurable:!0}),e.prototype.initialize=function(){return st(this,void 0,void 0,(function(){var t,e,n;return at(this,(function(r){switch(r.label){case 0:return[4,this._api.createSession()];case 1:return t=r.sent(),e=t.id,n=t.token,this.id=e,this.token=n,[2]}}))}))},e.prototype.debug=function(e,n){this.addEntry(t.Debug,"".concat(e),n)},e.prototype.info=function(e,n){this.addEntry(t.Info,"".concat(e),n)},e.prototype.log=function(e,n){this.addEntry(t.Info,"".concat(e),n)},e.prototype.warning=function(e,n){this.addEntry(t.Warn,"".concat(e),n)},e.prototype.warn=function(e,n){this.addEntry(t.Warn,"".concat(e),n)},e.prototype.verbose=function(e,n){this.addEntry(t.Verbose,"".concat(e),n)},e.prototype.silly=function(e,n){this.addEntry(t.Silly,"".concat(e),n)},e.prototype.error=function(e,n){this.addEntry(t.Error,"".concat(e),n)},e.prototype.addEntry=function(t,e,n,r){var o={type:t,message:e,category:n,date:r||new Date};this.entries.push(o)},e.prototype.flush=function(){return st(this,void 0,void 0,(function(){var t;return at(this,(function(e){switch(e.label){case 0:t=!0,e.label=1;case 1:return this.entries.length>0&&t?[4,this._dispatchEntry()]:[3,3];case 2:return t=e.sent(),[3,1];case 3:return[2]}}))}))},e.prototype._dispatchEntry=function(){return st(this,void 0,void 0,(function(){var t,e;return at(this,(function(n){switch(n.label){case 0:if(!(t=this.entries.shift()))return[2,!1];n.label=1;case 1:return this._delay>0?[4,w.sleep(1e3)]:[3,3];case 2:return n.sent(),this._delay--,[3,1];case 3:return n.trys.push([3,5,,6]),[4,this._api.addRawEntry(this.id,this.token,t)];case 4:return n.sent(),this._errorCounter=0,[3,6];case 5:if(e=n.sent(),this.entries.unshift(t),this._errorCounter++,this._delay=Math.min(60,Math.pow(2,this._errorCounter)),this.errorInterceptor&&!1===this.errorInterceptor(e,t,this._errorCounter))return[2,!1];throw e;case 6:return[2,!0]}}))}))},e.prototype.dispose=function(){return st(this,void 0,void 0,(function(){return at(this,(function(t){switch(t.label){case 0:return this.isInitialized?[4,this.flush()]:[3,3];case 1:return t.sent(),[4,this._api.closeSession(this.id,this.token)];case 2:t.sent(),this.id=-1,this._interval&&(clearInterval(this._interval),this._interval=null),t.label=3;case 3:return[2]}}))}))},e}();function ut(){return it.instance}var lt=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},ht=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};function ft(t,e,n){return lt(this,void 0,void 0,(function(){var r,o,i;return ht(this,(function(s){switch(s.label){case 0:return r={key:t,secret:e,environment:"production"},(o=Object.assign({},r,n||{})).requestDriver=o.requestDriver||new c,[4,(i=new it(o)).login()];case 1:return s.sent(),[2,i]}}))}))}var pt=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))},dt=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};function yt(t,e,n){return pt(this,void 0,void 0,(function(){var r,o,i;return dt(this,(function(s){switch(s.label){case 0:return r={keySecretToken:t,credentialSessionToken:e,environment:"production"},(o=Object.assign({},r,n||{})).requestDriver=o.requestDriver||new c,i=new it(o),e?[3,2]:[4,i.login()];case 1:s.sent(),s.label=2;case 2:return[2,i]}}))}))}})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,